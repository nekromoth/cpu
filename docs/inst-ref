================================================================================
								 Register File								   
================================================================================

	------------------------------------------
	POS		MNE 	DESCRIPTION
	------------------------------------------
	0		r0		General Purpose Register 0
	1		r1		General Purpose Register 1
	2		r2		General Purpose Register 2
	3		r3		General Purpose Register 3 
	4		r4		General Purpose Register 4
	5		r5		General Purpose Register 5
	6		r6		General Purpose Register 6
	7		r7		General Purpose Register 7
		
	8		XR		Extended Result Register
	9		FR  	Flag Register
	a		SS		Stack Segment
	b		SP		Stack Pointer
	c		IS  	Instruction Segment
	d		IP		Instruction Pointer
	e		RS		Return Segment
	f		RP		Return Pointer
	------------------------------------------

================================================================================
							 Hardware Instructions
================================================================================

	---------------------------------------------------------------------
	INST OPR(s)		DESCRIPTION
	---------------------------------------------------------------------
	mov  D, S		move data from S to D
	set  D, I		set D to I
	str  [A], S		store S in A
	str  [H:L], S	store S in H:L
	str  [R], S		store S in IS:R
	ld   D, [A]		load from A into D
	ld   D, [H:L]	load from H:L into D
	ld   D, [R]		load from IS:R into D
	psh  S			push S onto stack
	pop  D			pop D from stack
	add  D, S		signed addition  D = D + S + C
	add  D, I		signed addition  D = D + I + C
	sub  D, S		signed subtraction  D = D - S - C
	sub  D, I		signed subtraction  D = D - I - C
	mul  D, S   	signed multiplication  D = D * S
	mul  D, I		signed multiplication  D = D * I
	div  D, S		signed division  D = D / S 
	div  D, I		signed division  D = D / I
	cmp  S, s		compare registers
	cmp  S, I		compare register to immediate
	and  D, S		logical AND  D = D & S
	and  D, I		logical AND  D = D & I
	or   D, S		logical OR  D = D | S
	or   D, I		logical OR  D = D | I
	xor  D, S		logical XOR  D = D ^ S
	xor  D, I		locical XOR  D = D ^ I
	lsh  D, I		logical left-shift D = D << I
	rsh  D, I		logical right-shift D = D >> I
	hlt             halt processor
	jmp A           jump to A
	jmp H:L        	jump to H:L
	jmp R          	jump to IS:R
	jc  R          	jump to IS:R if carry
	jnc R          	jump to IS:R if not carry
	jv  R          	jump to IS:R if overflow
	jnv R          	jump to IS:R if not overflow
	je  R          	jump to IS:R if equal
	jne R          	jump to IS:R if not equal
	js  R          	jump to IS:R if signed
	jns R          	jump to IS:R if not signed
	ja  R          	jump to IS:R if "above" greater (unsigned)
	jna R          	jump to IS:R if "not above" not greater (unsigned)
	jb  R          	jump to IS:R if "below" less (unsigned)
	jnb R          	jump to IS:R if "not below" not less ()
	jg  R          	jump to IS:R if greater (signed)
	jng R          	jump to IS:R if not greater (signed)
	jl  R          	jump to IS:R if less (signed)
	jnl R          	jump to IS:R if not less (signed)
	---------------------------------------------------------------------

================================================================================
							 SOFTWARE INSTRUCTIONS
================================================================================
	
	ret				"return"  same as  jmp  RS:RP


PREREQUESITES
	digits			0123456789
	letters			abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRST
	alphanummeric	(digits + letters)
	hexletters		abcdefABCDEF
	hexnumber		(digits + hexletters)
	symbols			!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
	non-printable	<space> <tab> <newline>

INSTUCTION
	<instruction> 
	<instruction> <operand> <operand>

LITERAL
	Begins with a letter, subsequent characters can be alphanummeric.

SLITERAL	(String-literal)
	A string inside " "
	
	\n == NEWLINE
	\\ == \
	\" == "

ILITERAL	(Integer-literal)
	Can be:
		Binary		0b1	 	0b11_11	0b_0_0_0_1
		Decimal 	0	 	-1		+1
		Hexadecimal	0x0		0xFFff	0x0001

COMMENT
	Comment your code
	# comment

CONSTANT
	A constant is converted to a immediate or absolute-address.
	% <sliteral> <iliteral>

DATA-DIRECTIVE
	A data-directive write provided values into file-memory
	$ <i/sliteral>, <i/sliteral>, ...,<i/sliteral>

LABEL
	Holds a relative address.
	<literal>:

ORIGIN
	Tell your compiler where certain instructions are located
	@ <sliteral>

================================================================================
								 TEST ASSEMBLY 
================================================================================
# copy the contents form array into new_array 

% ARRAY_LENGHTH		4
% NEW_ARRAY_SEG		1			# segment of the new array
% NEW_ARRAY_PTR		0xfff0		# pointer of the new array

@ 0x0000
	Main:	
		jmp Copy_array
	hlt

	Copy_array:
		psh	 RS
		psh  RP

		# r1 	Counter 
		# r2	segment of new array
		# r3	pointer of new array
		# r4	pointer of old array
		# r5 	holds the data to copy

		set  r1, 0
		set  r2, NEW_ARRAY_SEG
		set  r3, NEW_ARRAY_PTR
		set	 r4  array
		
		Copy_array_loop:
			ld   r5, [IS:r4]		# load from old array
			str  [r2:r3], r5		# store in new array
			
			add  r1, 1				# increment counter
			cmp  r1, ARRAY_LENGHT	# counter == ARRAY_LENGTH ? loop : end
			
		je   Copy_array_loop_end
		jmp  Copy_array_loop

	Copy_array_loop_end:
		pop  RS
		pop  RP
	ret
			
array:
	$ 100, -12, 0b1000_1111, 0xf0fe
